@startuml factory

abstract class AcSpecialCard {
    Model getModel();
    Controller getController();
    void advance();
}

class ActivationFactory{
    + AcSpecialCard getActivation()
    + EndOfTurn getEndOfTurn()
}

class PlaySpecialCardCommand{
    + void execute()
}

PlaySpecialCardCommand --> ActivationFactory

package "AcSpecialCard"{
    abstract class AcSpecialCard {
        + void activate(ArenaController arenaController)
    }

    class AcAddHpPerTurn{
        - AddHpPerTurn card
        + void activate(ArenaController arenaController)
    }

    class AcDamageGamble{
        - DamageGamble card
        + void activate(ArenaController arenaController)
    }

    class AcOnWinDamage{
        - OnWinDamage card
        + void activate(ArenaController arenaController)
    }

    class AcFluxModifierAtoB{
        - FluxModifierAtoB card
        + void activate(ArenaController arenaController)
    }

    class AcStaticModifier{
        - StaticModifier card
        + void activate(ArenaController arenaController)
    }

    class AcInstantDamage{
        - InstantDamage card
        + void activate(ArenaController arenaController)
    }


    AcAddHpPerTurn .right.|> AcSpecialCard
    AcDamageGamble .right.|> AcSpecialCard
    AcOnWinDamage ..|> AcSpecialCard
    AcFluxModifierAtoB ..|> AcSpecialCard
    AcStaticModifier..|> AcSpecialCard
    AcInstantDamage ..|> AcSpecialCard
}

ActivationFactory --> AcSpecialCard

@enduml